import * as fs from "fs/promises";
import * as path from "path";
import { BuildConfig, ParseResult, SourceFile, ASTNode } from "../../types";
import glob from "glob";

export class Parser {
  private config: BuildConfig;
  private totalSize: number = 0;

  constructor(config: BuildConfig) {
    this.config = config;
  }

  async parseFiles(): Promise<ParseResult> {
    const { sourceDir, include, exclude } = this.config;

    // Find all files matching include patterns and not matching exclude patterns
    const filePatterns = await glob.glob(include, {
      cwd: path.resolve(this.config.projectRoot, sourceDir),
      ignore: exclude,
    });

    const ast: Record<string, ASTNode> = {};
    const files: SourceFile[] = [];
    const errors: Record<string, Error[]> = {};

    // Process each file
    for (const file of filePatterns) {
      try {
        // Read file content
        const filePath = path.join(this.config.projectRoot, sourceDir, file);
        const content = await fs.readFile(filePath, "utf-8");

        // Track the file size
        const stats = await fs.stat(filePath);
        this.totalSize += stats.size;

        // Create a basic AST node (in a real parser, this would be generated by parsing the file)
        const astNode: ASTNode = {
          type: "File",
          start: 0,
          end: content.length,
          loc: {
            start: { line: 1, column: 0 },
            end: { line: content.split("\n").length, column: 0 },
          },
          body: [],
        };

        // Add to our collections
        ast[file] = astNode;
        files.push({
          path: file,
          content,
          ast: astNode,
        });
        errors[file] = []; // No errors for this file
      } catch (error) {
        // If there was an error reading or processing the file, record it
        errors[file] = [
          error instanceof Error ? error : new Error(String(error)),
        ];
      }
    }

    // Add the totalSize as a property of the ParseResult
    const result: ParseResult & { totalSize?: number } = {
      files,
      ast,
      errors,
      totalSize: this.totalSize,
    };

    return result;
  }

  // ... existing code ...
}
